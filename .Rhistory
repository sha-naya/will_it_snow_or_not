nrow(swissmunicipalities)
rows <- (1:nrow(swissmunicipalities))[s!=0]
rows <- rep(rows, s[s != 0])
rows
sample.1 <- swissmunicipalities[rows, ]
sample.1
set.seed(123)
section.ids <- rep(LETTERS[1:4], each = 25)
section.scores <- round(runif(100, 60, 80))
data <- data.frame(
Section = section.ids,
Score = section.scores)
head(data)
table(data$Section)
st.1 <- sampling::strata(data, stratanames = c("Section"),
size = rep(3, 4), method = "srswor",
description = TRUE)
st.1
st.sample1 <- getdata(data, st.1)
st.sample1
set.seed(123)
section.ids <- rep(LETTERS[1:4], c(10, 20, 30, 40))
section.ids
section.scores <- round(runif(100, 60, 80))
section.scores
length(section.scores)
max(section.scores)
data <- data.frame(
Section = section.ids,
Score = section.scores)
head(data)
freq <- table(data$Section)
freq
st.sizes <- 20 * freq / sum(freq)
st.sizes
st.2 <- sampling::strata(data, stratanames = c("Section"),
size = st.sizes, method = "srswor",
description = TRUE)
st.2
st.sample2 <- getdata(data, st.2)
st.sample2
set.seed(123)
section.ids <- rep(LETTERS[1:4], c(10, 20, 30, 40))
section.genders <-
rep(rep(c("F", "M"), 4),
c(10, 0, 5, 15, 20, 10, 15, 25))
section.scores <- round(runif(100, 60, 80))
data <- data.frame(
Section = section.ids,
Gender = section.genders,
Score = section.scores)
head(data)
data <- data[order(data$Section, data$Gender), ]
freq <- table(data$Section, data$Gender)
freq
st.sizes <- 20 * freq / sum(freq)
st.sizes
as.vector(st.sizes)
as.vector(t(st.sizes))
st.sizes <- as.vector(t(st.sizes))
st.sizes <- st.sizes[st.sizes != 0]
st.sizes
st.3 <- sampling::strata(data,
stratanames = c("Section", "Gender"),
size = st.sizes, method = "srswor",
description = TRUE)
st.3
st.sample3 <- getdata(data, st.3)
st.sample3
set.seed(113)
#
order.index <- order(swissmunicipalities$REG)
data <- swissmunicipalities[order.index, ]
head(data[c(2,4,14,17,22)])
swissmunicipalities$REG
st <- sampling::strata(data, stratanames = c("REG"),
size = c(14,22,8,4,11,5,6) ,
method = "srswor")
sample.5 <- getdata(data, st)
table(sample.5$REG)
library(tidyverse)
library(nycflights13)
weather
names(flights2)
names(weather)
flights2 <- flights %>%
select(year:day, hour, origin, dest, tailnum, carrier)
flights2
intersect(names(flights2), names(weather))
weather
planes
flights2 %>%
left_join(planes, by = "tailnum") %>%  View()
airports
names(airports)
names(flights2)
str_subset(airports$faa, "^B")
unique(str_subset(flights2$dest, "^B"))
flights2 %>%
left_join(airports, c("dest" = "faa")) %>% View
distinct(flights, origin)
distinct(flights, tailnum) %>% head
flights %>%
filter(arr_delay > 0) %>%
group_by(year, month) %>%
summarise(count = n(),
avg_delay = mean(arr_delay))
set.seed(123)
sales <-
tibble(Store=rep(1:3, each=4),
Year=rep(2014:2017, 3),
Qtr_1 = round(runif(12, 10, 30)),
Qtr_2 = round(runif(12, 10, 30)),
Qtr_3 = round(runif(12, 10, 30)),
Qtr_4 = round(runif(12, 10, 30))
)
sales
sales %>%
gather(Quarter, Revenue, Qtr_1 : Qtr_4) %>%
head(12)
long_data %>%
separate(Quarter, c("Time_Interval", "Interval_ID"),
convert = TRUE) -> separate_data
library(tidyverse)
tstate <- as_tibble(state.x77)
tstate$Region <- state.region
tstate$Name   <- state.name
tstate <- select(tstate, Name, Region, everything())
glimpse(tstate)
tstate %>% arrange(Name) %>%
group_by(Region) %>%
summarise(total_rows = n(),
first_state = first(Name),
last_state = last(Name),
unique_states = n_distinct(Name),
max_literacy = max(100-Illiteracy),
mean_literacy = mean(100-Illiteracy, na.rm=T))
tstate %>% arrange(Name) %>%
group_by(Region) %>%
select(total_rows = n(),
first_state = first(Name),
last_state = last(Name),
unique_states = n_distinct(Name),
max_literacy = max(100-Illiteracy),
mean_literacy = mean(100-Illiteracy, na.rm=T))
iris %>%
group_by( Species) %>%
select(Sepal.Length, Sepal.Width)   %>%
summarise( meanSL=mean(Sepal.Length),
sdSL=sd(Sepal.Length),
meanSW= mean(Sepal.Width),
sdSW= sd(Sepal.Width)) %>%
filter(meanSL==max(meanSL) | meanSW==max(meanSW))
library(tidyverse)
library(nycflights13)
flights2 <- flights %>%
select(year:day, hour, origin, dest, tailnum, carrier)
flights2
airlines
flights2 %>%
select(-origin, -dest) %>%
left_join(airlines, by = "carrier")
weather
names(flights2)
names(weather)
intersect(names(flights2), names(weather))
planes
intersect(names(flights2), names(planes))
flights2 %>%
left_join(planes, by = "tailnum") %>%  View()
flights2 %>%
left_join(planes, by = "tailnum", suffix=c("_left","_right")) %>%  View()
library(plotly)
flights3 <- flights2 %>%
group_by(dest) %>%
summarise(count = n())
flights3
flights4 <- flights3 %>%
inner_join(airports, c("dest" = "faa"))
flights4
geo <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
geo
plot_geo(flights4, lat = ~lat, lon = ~lon) %>%
add_markers(text = ~paste(dest, name,  paste("Total:", count), sep = "<br />"),
color = ~count, symbol = I("square"), size = I(8), hoverinfo = "text"
) %>%
colorbar(title = "nycflights13 data") %>%
layout(title = 'NYC Flights Dataset<br />(Hover for airport)',
geo = geo)
set.seed(123)
df <- data.frame(Name = paste0("P", 1:5),
Age = sample(20:60, 5))
df
df %>%
inner_join(df, by= character(),
suffix=c("1","2")) %>%
filter(Age1 < Age2)
times100 <- read.csv('https://people.bu.edu/kalathur/datasets/times100.csv')
times100
set.seed(389)
library(sampling)
#a
sample1 <- srswor(12, nrow(times100))
times100[s != 0]
times100[sample1 != 0]
sample1
times100[sample1 != 0,]
#a
s <- srswor(12, nrow(times100))
sample1 <- times100[sample1 != 0,]
sample1
count(sample1$location)
distinct(sample1$location)
sample1$location
group_by(sample1$location)
mean(sample1$scores_overall)
#b
k <- ceiling(nrow(times100) / 12)
#b
k <- ceiling(nrow(times100) / 12)
r <- sample(k, 1)
seq(r, by = k, length = 12)
s2 <- seq(r, by = k, length = 12)
#a
s <- srswor(12, nrow(times100))
sample1 <- times100[s != 0,]
sample1
sample2 <- times100[s2 != 0,]
sample2
sample2 <- times100[s2,]
sample2
mean(sample2$scores_overall)
#b
k <- ceiling(nrow(times100) / 12)
r <- sample(k, 1)
s2 <- seq(r, by = k, length = 12)
sample2 <- times100[s2,]
sample2
sample2[1:11]
sample2[1:10]
sample2[1:11,]
mean(sample2[1:11,]$scores_overall)
#c
sample3 <- sampling::strata(times100, stratanames = c("location"),
size = rep(4, 12), method = "srswor",
description = TRUE)
#c
sample3 <- sampling::strata(times100, stratanames = c("location"),
size = rep(12, 4), method = "srswor",
description = TRUE)
#c
sample3 <- sampling::strata(times100, stratanames = c("location"),
size = rep(4, 12), method = "srswor",
description = TRUE)
aggregate(times100, by = c('location'), FUN = count)
aggregate(times100, by = list('location'), FUN = count)
aggregate(times100$location, by = list('location'), FUN = count)
unique(times100)
unique(times100$location)
times100 %>% group_by('location') %>% summarise(total_rows = n())
times100 %>% group_by(location) %>% summarise(total_rows = n())
sample1 %>% group_by(location) %>% summarise(total_rows = n())
max(times100 %>% group_by(location) %>% summarise(total_rows = n()))
max(times100 %>% group_by(location) %>% summarise(total_rows = n()),)
sample1 %>% group_by(location) %>% summarise(total_rows = n()) %>% arrange(total_rows)
sample1 %>% group_by(location) %>% summarise(total_rows = n()) %>% arrange(total_rows, desc)
sample1 %>% group_by(location) %>% summarise(total_rows = n())[-1,]
sample1 %>% group_by(location) %>% summarise(total_rows = n())[1,]
sample1 %>% group_by(location) %>% summarise(total_rows = n())
tail(sample1 %>% group_by(location) %>% summarise(total_rows = n()))
tail(sample1 %>% group_by(location) %>% summarise(total_rows = n()), 1)
times100 %>% group_by(location) %>% summarise(total_rows = n())
times100 %>% group_by(location) %>% summarise(total_rows = n()) %>% arrange(location)
times100 %>% group_by(location) %>% summarise(total_rows = n()) %>% arrange(location)$total_rows
prob1 <- times100 %>% group_by(location) %>% summarise(total_rows = n()) %>% arrange(location)
prob1$total_rows
prob2 <- prob1$total_rows
prob2
s2 <- UPsystematic(pik)
pik <- inclusionprobabilities(prob2, 12)
s2 <- UPsystematic(pik)
sample2 <- times100[s2,]
sample2
#c
sample3 <- sampling::strata(times100, stratanames = c("location"),
size = rep(4, 12), method = "srswor",
description = TRUE)
times100 %>% group_by(location) %>% summarise(total_rows = n())
times100 %>% group_by(location) %>% summarise(total_rows = n()) %>% arrange(total_rows)
tail(times100 %>% group_by(location) %>% summarise(total_rows = n()) %>% arrange(total_rows), 4)
#c
top4 <- tail(times100 %>% group_by(location) %>% summarise(total_rows = n()) %>% arrange(total_rows), 4)
top4_countries <- top4$location
subset1 <- filter(times100, location==top4_countries)
subset1
sample3 <- sampling::strata(times100, stratanames = c("location"),
size = rep(4, 12), method = "srswor",
description = TRUE)
sample3 <- sampling::strata(subset1, stratanames = c("location"),
size = rep(4, 12), method = "srswor",
description = TRUE)
sample3 <- sampling::strata(subset1, stratanames = c("location"),
size = rep(4, 3), method = "srswor",
description = TRUE)
sample3 <- sampling::strata(subset1, stratanames = c("location"),
size = rep(3, 4), method = "srswor",
description = TRUE)
sample3 <- sampling::strata(subset1, stratanames = c("location"),
size = rep(3), method = "srswor",
description = TRUE)
sample3 <- sampling::strata(subset1, stratanames = c("location"),
size = rep(3, 2), method = "srswor",
description = TRUE)
sample3 <- sampling::strata(subset1, stratanames = c("location"),
size = rep(3, 4), method = "srswor",
description = TRUE)
top4
subset1 <- filter(times100, location==top4_countries)
subset1
top4_countries
subset1 <- filter(times100, location=='Netherlands' | location=='Germany' | location=='United Kingdom' | location=='United States')
sample3 <- sampling::strata(subset1, stratanames = c("location"),
size = rep(3, 4), method = "srswor",
description = TRUE)
aggregate(times100$location, by = list('location'), FUN = count)
aggregate(sample3$location, by = list('location'), FUN = count)
mean(sample3$scores_overall)
#2
#a
continents <- read.csv('https://people.bu.edu/kalathur/datasets/continents.csv')
times100
continents
prob1 <- times100 %>%
group_by(location) %>%
summarise(total_rows = n(),
total_number_students=sum(stats_number_students),
avg = mean(stats_number_students)
) %>%
arrange(location)
prob1
prob1 <- times100 %>%
group_by(location) %>%
summarise(total_students=sum(stats_number_students),
avg_students = mean(stats_number_students)
) %>%
arrange(avg_students)
a <- times100 %>%
group_by(location) %>%
summarise(total_students=sum(stats_number_students),
avg_students = mean(stats_number_students)
) %>%
arrange(avg_students)
a
#b
times100 %>%
inner_join(continents)
#b
continents %>% mutate(location=continents$country)
continents
#b
new_continents <- continents %>% mutate(location=continents$country)
times100 %>%
inner_join(new_continents)
new_times100 <- times100 %>%
inner_join(new_continents)
b <- new_times100 %>%
group_by(continent) %>%
summarise(uni_count=n(),
max = max(stats_number_students),
min = min(stats_number_students),
country_count = count(unique(location))
)
b <- new_times100 %>%
group_by(continent) %>%
summarise(uni_count=n(),
max = max(stats_number_students),
min = min(stats_number_students),
country_count = n(unique(location))
)
b <- new_times100 %>%
group_by(continent) %>%
summarise(uni_count=n(),
max = max(stats_number_students),
min = min(stats_number_students),
country_count = nrow(unique(location))
)
b
#c
asia <- filter(new_times100, continent=="Asia")
asia
nrow(asia)
sum(asia$stats_number_students)
mean(asia$stats_number_students)
asia[asia$stats_number_students > mean(asia$stats_number_students),]
nrow(asia[asia$stats_number_students > mean(asia$stats_number_students),])
#a
s <- srswor(12, nrow(times100))
sample1 <- times100[s != 0,]
sample1
sample1 %>% group_by(location) %>% summarise(total_rows = n())
tail(sample1 %>% group_by(location) %>% summarise(total_rows = n()), 1)
mean(sample1$scores_overall)
reviews <- read.table("/Users/ayan/Downloads/aclImdb/train/urls_neg.txt")
reviews
neg_reviews <- read.table("/Users/ayan/Downloads/aclImdb/train/neg/0_3.txt")
neg_reviews
x <- c(16023,220,29645,25911,1740,1668,0,19,6,1,2461,1073,20,43,0,0,0,0,27,29,13,0,0,0,78899)
len(x)
length(x)
data <- read.table("/Users/ayan/Downloads/creditcard.csv")
data
data <- read.csv("/Users/ayan/Downloads/creditcard.csv")
data
head(data)
data <- read.csv("/Users/ayan/Downloads/weather.csv")
table(data)
table(data$WT09_ATTRIBUTES)
table(data$WT09)
View(data)
table(data$PGTM)
table(data$PGTM_ATTRIBUTES)
table(data$TAVG)
table(data$TAVG_ATTRIBUTES)
table(data$WT02)
table(data$WT03)
table(data$WT04)
table(data$AWND_ATTRIBUTES)
table(data$PGTM)
table(data$PGTM_ATTRIBUTES)
table(data$PRCP_ATTRIBUTES)
table(data$SNOW_ATTRIBUTES)
table(data$TAVG_ATTRIBUTES)
table(data$TMAX_ATTRIBUTES)
table(data$TMIN_ATTRIBUTES)
table(data$SNOW)
pnorm(q = 4.5393, mean = 5.454, sd = 0.5924)
pnorm(q = 57.22, mean = 55, sd = 0.74)
pnorm(q = 57.22, mean = 55, sd = 0.74) - pnorm(q = 52.78, mean = 55, sd = 0.74)
median(c(49, 95, 22, 51, 29, 40))
pnorm(q = 860, mean = 1172, sd = 318/sqrt(85))
pnorm(q = 278, mean = 258, sd = 10) - pnorm(q = 238, mean = 258, sd = 10)
qnorm(p = 0.03, mean = 0, sd = 1, lower.tail = FALSE)
mean(c(27, 89, 33, 99, 4, 59))
(273 - 292) / 7
pnorm(q = 301, mean = 280, sd = 5, lower.tail = FALSE)
#3
library(RWeka)
#3
install.packages("rJava", type = "source")
install.packages("RWeka", type = "source")
library(rJava)
sudo R CMD javareconf
CMD javareconf
#3
install.packages("rJava", type = "source")
#3
install.packages("rJava", type = "source")
Sys.setenv(JAVA_HOME="/Users/ayan/Library/Caches/Coursier/jvm/adopt@1.11.0-11/Contents/Home")
Sys.setenv(JAVA_HOME="/Users/ayan/Library/Caches/Coursier/jvm/adopt@1.11.0-11/Contents/Home")
library(rJava)
#3
install.packages("rJava", type = "source")
getwd()
setwd("/Users/ayan/Desktop/BU/Spring 2023/CS699_project")
weather_data <- read.csv("weather_data.csv")
weather_data
nrow(weather_data)
ncol(weather_data)
table(weather_data)
library(dplyr)
dplyr::count(weather_data, AWND_ATTRIBUTES, sort = TRUE)
sapply(weather_data, function(x) dplyr::count(weather_data, x, sort = TRUE) )
sapply(weather_data, dplyr::count(sort = TRUE) )
weather_data_cols <- colnames(weather_data)
for (column in weather_data_cols) {
dplyr::count(weather_data, column, sort = TRUE)
}
dplyr::count(weather_data, PGTM, sort = TRUE)
dplyr::count(weather_data, PGTM_ATTRIBUTES, sort = TRUE)
dplyr::count(weather_data, PRCP_ATTRIBUTES, sort = TRUE)
dplyr::count(weather_data, SNOW_ATTRIBUTES, sort = TRUE)
dplyr::count(weather_data, TAVG_ATTRIBUTES, sort = TRUE)
dplyr::count(weather_data, TMAX_ATTRIBUTES, sort = TRUE)
dplyr::count(weather_data, TMIN_ATTRIBUTES, sort = TRUE)
dplyr::count(weather_data, WDF2_ATTRIBUTES, sort = TRUE)
dplyr::count(weather_data, WDF5_ATTRIBUTES, sort = TRUE)
dplyr::count(weather_data, WSF2_ATTRIBUTES, sort = TRUE)
dplyr::count(weather_data, WSF5_ATTRIBUTES, sort = TRUE)
dplyr::count(weather_data, WT01, sort = TRUE)
dplyr::count(weather_data, WT01_ATTRIBUTES, sort = TRUE)
dplyr::count(weather_data, WT02, sort = TRUE)
dplyr::count(weather_data, WT02_ATTRIBUTES, sort = TRUE)
dplyr::count(weather_data, WT03, sort = TRUE)
dplyr::count(weather_data, WT04, sort = TRUE)
dplyr::count(weather_data, WT05, sort = TRUE)
dplyr::count(weather_data, WT06, sort = TRUE)
dplyr::count(weather_data, WT07, sort = TRUE)
dplyr::count(weather_data, WT08, sort = TRUE)
dplyr::count(weather_data, WT09, sort = TRUE)
dplyr::count(weather_data, SNOW, sort = TRUE)
dplyr::count(weather_data, weather_condition, sort = TRUE)
dplyr::count(weather_data, SNOW, sort = TRUE)
dplyr::count(weather_data, weather_condition, sort = TRUE)
